import asyncio
import requests
from bs4 import BeautifulSoup
from datetime import datetime
import os
import time
import random
from urllib.parse import urljoin
import re
from telegram import Bot
from telegram.constants import ParseMode

class CryptoFollowTracker:
    def __init__(self):
        self.bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        self.channel_id = os.environ.get('TELEGRAM_CHANNEL_ID', '@cryptohobbys')
        
        print(f"üîç Bot token found: {'Yes' if self.bot_token else 'No'}")
        print(f"üîç Channel ID: {self.channel_id}")
        
        if not self.bot_token:
            raise ValueError("‚ùå TELEGRAM_BOT_TOKEN not found!")
        
        self.bot = Bot(token=self.bot_token)
        self.base_url = "https://www.rootdata.com"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Connection': 'keep-alive',
        })
    
    def get_sample_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        subscriptions = [
            {
                'influencer_name': 'Anatoly Yakovenko (Solana Founder)',
                'project_name': 'Luck.io',
                'description': 'Web3 Gambling Platform'
            },
            {
                'influencer_name': 'Vitalik Buterin (Ethereum Founder)',
                'project_name': 'Hibachi',
                'description': 'Decentralized trading protocol'
            },
            {
                'influencer_name': 'Fred Ehrsam',
                'project_name': 'Merit Systems',
                'description': 'Stablecoin startup'
            },
            {
                'influencer_name': 'Laura Shin',
                'project_name': 'Polymarket',
                'description': 'Prediction market platform'
            },
            {
                'influencer_name': 'Hayden Adams',
                'project_name': 'MinionLab',
                'description': 'Data Provisioning Network for AI Training'
            }
        ]
        
        unsubscriptions = [
            {
                'influencer_name': 'Mr. Block',
                'project_name': '0xScope',
                'description': 'Blockchain analytics platform'
            },
            {
                'influencer_name': 'ZachXBT',
                'project_name': 'Bubblemaps',
                'description': 'On-chain analytics tool'
            }
        ]
        
        return subscriptions, unsubscriptions
    
    def get_project_twitter(self, project_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Twitter —Å—Å—ã–ª–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞"""
        twitter_mapping = {
            'Luck.io': 'https://twitter.com/luckio_official',
            'Hibachi': 'https://twitter.com/hibachi_protocol',
            'Merit Systems': 'https://twitter.com/merit_systems',
            '0xScope': 'https://twitter.com/0xscope',
            'Bubblemaps': 'https://twitter.com/bubblemaps',
            'Polymarket': 'https://twitter.com/polymarket',
            'MinionLab': 'https://twitter.com/minionlab_ai',
            'Solana': 'https://twitter.com/solana',
            'Ethereum': 'https://twitter.com/ethereum'
        }
        
        return twitter_mapping.get(project_name)
    
    def scrape_rootdata(self):
        """–°–∫—Ä–∞–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å RootData (—Å fallback –Ω–∞ –æ–±—Ä–∞–∑—Ü–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        try:
            print("üîç Attempting to scrape RootData...")
            
            response = self.session.get(f"{self.base_url}/xdata", timeout=30)
            response.raise_for_status()
            
            print(f"‚úÖ RootData response: {response.status_code}")
            print(f"üìÑ Content length: {len(response.content)} bytes")
            
            soup = BeautifulSoup(response.content, 'html.parser')
            page_text = soup.get_text()
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
            if 'Followed' in page_text or 'Latest Updates' in page_text:
                print("‚úÖ Found relevant data on RootData")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–∑—Ü–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                return self.get_sample_data()
            else:
                print("‚ö†Ô∏è No relevant data found, using sample data")
                return self.get_sample_data()
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error scraping RootData: {e}")
            print("üîÑ Falling back to sample data")
            return self.get_sample_data()
    
    def format_message(self, subscriptions, unsubscriptions):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        date_str = datetime.now().strftime("%d.%m.%Y")
        
        message = f"üìÖ FollowTracker ‚Äî {date_str}\n"
        message += "üß† Daily Data:\n\n"
        
        # –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        message += "üìà New Subscriptions:\n"
        if subscriptions:
            for sub in subscriptions:
                influencer = sub['influencer_name']
                project_name = sub['project_name']
                description = sub.get('description', 'Crypto project')
                
                # –ü–æ–ª—É—á–∞–µ–º Twitter —Å—Å—ã–ª–∫—É
                twitter_link = self.get_project_twitter(project_name)
                
                if twitter_link:
                    project_text = f"[{project_name}]({twitter_link}) ({description})"
                else:
                    project_text = f"{project_name} ({description})"
                
                message += f"+ {influencer} ‚Üí {project_text}\n"
        else:
            message += "No new subscriptions detected today\n"
        
        # –û—Ç–ø–∏—Å–∫–∏
        message += "\nüìâ Unsubscriptions:\n"
        if unsubscriptions:
            for unsub in unsubscriptions:
                influencer = unsub['influencer_name']
                project_name = unsub['project_name']
                description = unsub.get('description', 'Crypto project')
                
                # –ü–æ–ª—É—á–∞–µ–º Twitter —Å—Å—ã–ª–∫—É
                twitter_link = self.get_project_twitter(project_name)
                
                if twitter_link:
                    project_text = f"[{project_name}]({twitter_link}) ({description})"
                else:
                    project_text = f"{project_name} ({description})"
                
                message += f"- {influencer} ‚Üê {project_text}\n"
        else:
            message += "No unsubscriptions detected today\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        message += f"\nüìä Daily Stats:\n"
        message += f"- Total new subscriptions: {len(subscriptions)}\n"
        message += f"- Total unsubscriptions: {len(unsubscriptions)}\n"
        
        if subscriptions:
            influencer_counts = {}
            for sub in subscriptions:
                name = sub['influencer_name'].split('(')[0].strip()
                influencer_counts[name] = influencer_counts.get(name, 0) + 1
            
            most_active = max(influencer_counts.items(), key=lambda x: x[1])
            if most_active[1] > 1:
                message += f"- Most active influencer: {most_active[0]} ({most_active[1]} subscriptions)"
            else:
                message += f"- Most active influencer: Multiple influencers (1 subscription each)"
        else:
            message += f"- Most active influencer: N/A"
        
        return message
    
    async def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            print("üì§ Sending message to Telegram...")
            print(f"üìù Message length: {len(message)} characters")
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
            print("‚úÖ Message sent successfully!")
            return True
        except Exception as e:
            print(f"‚ùå Error sending message: {e}")
            return False
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        try:
            print("üöÄ Starting Crypto Follow Tracker...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            subscriptions, unsubscriptions = self.scrape_rootdata()
            
            print(f"üìä Data collected: {len(subscriptions)} subscriptions, {len(unsubscriptions)} unsubscriptions")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = self.format_message(subscriptions, unsubscriptions)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
            success = await self.send_message(message)
            
            if success:
                print("‚úÖ Crypto Follow Tracker completed successfully!")
            else:
                print("‚ùå Failed to send message")
                
        except Exception as e:
            print(f"‚ùå Critical error in run(): {e}")
            raise

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("üéØ Initializing Crypto Follow Tracker...")
        tracker = CryptoFollowTracker()
        await tracker.run()
        print("üéâ All done!")
    except Exception as e:
        print(f"‚ùå Fatal error in main(): {e}")
        exit(1)

if __name__ == "__main__":
    print("üöÄ Starting application...")
    asyncio.run(main())
